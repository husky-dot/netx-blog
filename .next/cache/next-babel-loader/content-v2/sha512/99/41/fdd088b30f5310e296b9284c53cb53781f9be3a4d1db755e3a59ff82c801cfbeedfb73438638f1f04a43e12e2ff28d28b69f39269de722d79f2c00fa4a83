{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport fs, { promises as fsPromise } from 'fs';\nimport path from \"path\";\nimport matter from 'gray-matter';\nexport var getPosts = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var markdownDir, fileNames, posts;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            markdownDir = path.join(process.cwd(), 'markdown');\n            _context.next = 3;\n            return fsPromise.readdir(markdownDir);\n\n          case 3:\n            fileNames = _context.sent;\n            posts = fileNames.map(function (fileName) {\n              var fullPath = path.join(markdownDir, fileName);\n              var id = fileName.replace(/\\.md$/, '');\n              console.log(fullPath);\n              var text = fs.readFileSync(fullPath, 'utf-8');\n\n              var _matter = matter(text),\n                  _matter$data = _matter.data,\n                  title = _matter$data.title,\n                  date = _matter$data.date,\n                  content = _matter.content;\n\n              return {\n                id: id,\n                title: title,\n                date: date\n              };\n            });\n            return _context.abrupt(\"return\", posts);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getPosts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["D:/MyProject/netx-blog/lib/posts.tsx"],"names":["fs","promises","fsPromise","path","matter","getPosts","markdownDir","join","process","cwd","readdir","fileNames","posts","map","fileName","fullPath","id","replace","console","log","text","readFileSync","data","title","date","content"],"mappings":";;AAAA,OAAOA,EAAP,IAAaC,QAAQ,IAAIC,SAAzB,QAAyC,IAAzC;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAO,IAAMC,QAAQ;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,WADgB,GACFH,IAAI,CAACI,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,UAAzB,CADE;AAAA;AAAA,mBAEEP,SAAS,CAACQ,OAAV,CAAkBJ,WAAlB,CAFF;;AAAA;AAEhBK,YAAAA,SAFgB;AAGhBC,YAAAA,KAHgB,GAGRD,SAAS,CAACE,GAAV,CAAe,UAAAC,QAAQ,EAAI;AACvC,kBAAMC,QAAQ,GAAGZ,IAAI,CAACI,IAAL,CAAUD,WAAV,EAAuBQ,QAAvB,CAAjB;AACA,kBAAME,EAAE,GAAGF,QAAQ,CAACG,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,kBAAMK,IAAI,GAAGpB,EAAE,CAACqB,YAAH,CAAgBN,QAAhB,EAA0B,OAA1B,CAAb;;AAJuC,4BAKAX,MAAM,CAACgB,IAAD,CALN;AAAA,yCAKhCE,IALgC;AAAA,kBAK1BC,KAL0B,gBAK1BA,KAL0B;AAAA,kBAKnBC,IALmB,gBAKnBA,IALmB;AAAA,kBAKZC,OALY,WAKZA,OALY;;AAMvC,qBAAO;AACLT,gBAAAA,EAAE,EAAFA,EADK;AACDO,gBAAAA,KAAK,EAALA,KADC;AACMC,gBAAAA,IAAI,EAAJA;AADN,eAAP;AAGD,aATa,CAHQ;AAAA,6CAafZ,KAbe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARP,QAAQ;AAAA;AAAA;AAAA,GAAd","sourcesContent":["import fs, { promises as fsPromise} from 'fs'\r\nimport path from \"path\";\r\nimport matter from 'gray-matter';\r\nexport const getPosts = async () => {\r\n  const markdownDir = path.join(process.cwd(), 'markdown');\r\n  const fileNames = await fsPromise.readdir(markdownDir)\r\n  const posts = fileNames.map( fileName => {\r\n    const fullPath = path.join(markdownDir, fileName)\r\n    const id = fileName.replace(/\\.md$/, '')\r\n    console.log(fullPath)\r\n    const text = fs.readFileSync(fullPath, 'utf-8')\r\n    const {data:{title, date}, content } = matter(text)\r\n    return {\r\n      id, title, date\r\n    }\r\n  })\r\n  return posts\r\n}\r\n"]},"metadata":{},"sourceType":"module"}