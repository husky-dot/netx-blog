{"ast":null,"code":"import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nexport const usePosts = () => {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState([]);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: isEmpty,\n    1: setIsEmpty\n  } = useState(false);\n  useEffect(() => {\n    setIsLoading(true);\n    axios.get('/api/v1/posts').then(response => {\n      setPosts(response.data);\n      setIsLoading(false);\n\n      if (response.data.length === 0) {\n        setIsEmpty(true);\n      }\n    }).catch(() => {\n      setIsLoading(false);\n    });\n  }, []);\n  return {\n    posts,\n    setPosts,\n    isLoading,\n    isEmpty\n  };\n};","map":{"version":3,"sources":["D:/MyProject/netx-blog/hooks/usePosts.tsx"],"names":["useState","useEffect","axios","usePosts","posts","setPosts","isLoading","setIsLoading","isEmpty","setIsEmpty","get","then","response","data","length","catch"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAOA,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC5B,QAAM;AAAA,OAACC,KAAD;AAAA,OAAQC;AAAR,MAAoBL,QAAQ,CAAS,EAAT,CAAlC;AACA,QAAM;AAAA,OAACM,SAAD;AAAA,OAAYC;AAAZ,MAA4BP,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACQ,OAAD;AAAA,OAAUC;AAAV,MAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACdM,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,IAAAA,KAAK,CAACQ,GAAN,CAAU,eAAV,EAA2BC,IAA3B,CAAgCC,QAAQ,IAAI;AAC1CP,MAAAA,QAAQ,CAACO,QAAQ,CAACC,IAAV,CAAR;AACAN,MAAAA,YAAY,CAAC,KAAD,CAAZ;;AACA,UAAIK,QAAQ,CAACC,IAAT,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BL,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KAND,EAMGM,KANH,CAMS,MAAM;AACbR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KARD;AASD,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO;AACLH,IAAAA,KADK;AACEC,IAAAA,QADF;AACYC,IAAAA,SADZ;AACuBE,IAAAA;AADvB,GAAP;AAGD,CApBM","sourcesContent":["import { useState, useEffect } from \"react\"\r\nimport axios from \"axios\"\r\ntype Post = {\r\n  id: string,\r\n  date: string,\r\n  title: string\r\n}\r\n\r\nexport const usePosts = () => {\r\n  const [posts, setPosts] = useState<Post[]>([])\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [isEmpty, setIsEmpty] = useState(false)\r\n  useEffect(() => {\r\n    setIsLoading(true)\r\n    axios.get('/api/v1/posts').then(response => {\r\n      setPosts(response.data)\r\n      setIsLoading(false)\r\n      if (response.data.length === 0) {\r\n        setIsEmpty(true)\r\n      }\r\n    }).catch(() => {\r\n      setIsLoading(false)\r\n    })\r\n  }, [])\r\n\r\n  return {\r\n    posts, setPosts, isLoading, isEmpty\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}